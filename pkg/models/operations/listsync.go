// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListSyncOrderBy - specify the order
type ListSyncOrderBy string

const (
	ListSyncOrderByID        ListSyncOrderBy = "id"
	ListSyncOrderByName      ListSyncOrderBy = "name"
	ListSyncOrderBySlug      ListSyncOrderBy = "slug"
	ListSyncOrderByCreatedAt ListSyncOrderBy = "createdAt"
	ListSyncOrderByUpdatedAt ListSyncOrderBy = "updatedAt"
)

func (e ListSyncOrderBy) ToPointer() *ListSyncOrderBy {
	return &e
}

func (e *ListSyncOrderBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "name":
		fallthrough
	case "slug":
		fallthrough
	case "createdAt":
		fallthrough
	case "updatedAt":
		*e = ListSyncOrderBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSyncOrderBy: %v", v)
	}
}

type ListSyncRequest struct {
	// select syncs that were run after given ISO timestamp
	After *time.Time `queryParam:"style=form,explode=true,name=after"`
	// select syncs that were run before given ISO timestamp
	Before *time.Time `queryParam:"style=form,explode=true,name=before"`
	// limit the number of objects returned (default is 100)
	Limit *float64 `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// filter based on modelId
	ModelID *float64 `queryParam:"style=form,explode=true,name=modelId"`
	// set the offset on results (for pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// specify the order
	OrderBy *ListSyncOrderBy `default:"id" queryParam:"style=form,explode=true,name=orderBy"`
	// filter based on slug
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

func (l ListSyncRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListSyncRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListSyncRequest) GetAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *ListSyncRequest) GetBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.Before
}

func (o *ListSyncRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListSyncRequest) GetModelID() *float64 {
	if o == nil {
		return nil
	}
	return o.ModelID
}

func (o *ListSyncRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListSyncRequest) GetOrderBy() *ListSyncOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *ListSyncRequest) GetSlug() *string {
	if o == nil {
		return nil
	}
	return o.Slug
}

// ListSync200ApplicationJSON - Ok
type ListSync200ApplicationJSON struct {
	Data    []shared.Sync `json:"data"`
	HasMore bool          `json:"hasMore"`
}

func (o *ListSync200ApplicationJSON) GetData() []shared.Sync {
	if o == nil {
		return []shared.Sync{}
	}
	return o.Data
}

func (o *ListSync200ApplicationJSON) GetHasMore() bool {
	if o == nil {
		return false
	}
	return o.HasMore
}

type ListSyncResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Ok
	ListSync200ApplicationJSONObject *ListSync200ApplicationJSON
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Validation Failed
	ValidateErrorJSON *shared.ValidateErrorJSON
}

func (o *ListSyncResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListSyncResponse) GetListSync200ApplicationJSONObject() *ListSync200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.ListSync200ApplicationJSONObject
}

func (o *ListSyncResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListSyncResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListSyncResponse) GetValidateErrorJSON() *shared.ValidateErrorJSON {
	if o == nil {
		return nil
	}
	return o.ValidateErrorJSON
}
