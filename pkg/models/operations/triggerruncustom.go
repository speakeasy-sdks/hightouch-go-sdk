// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/utils"
	"net/http"
)

type TriggerRunCustom200ApplicationJSONType string

const (
	TriggerRunCustom200ApplicationJSONTypeTriggerRunOutput  TriggerRunCustom200ApplicationJSONType = "TriggerRunOutput"
	TriggerRunCustom200ApplicationJSONTypeValidateErrorJSON TriggerRunCustom200ApplicationJSONType = "ValidateErrorJSON"
)

type TriggerRunCustom200ApplicationJSON struct {
	TriggerRunOutput  *shared.TriggerRunOutput
	ValidateErrorJSON *shared.ValidateErrorJSON

	Type TriggerRunCustom200ApplicationJSONType
}

func CreateTriggerRunCustom200ApplicationJSONTriggerRunOutput(triggerRunOutput shared.TriggerRunOutput) TriggerRunCustom200ApplicationJSON {
	typ := TriggerRunCustom200ApplicationJSONTypeTriggerRunOutput

	return TriggerRunCustom200ApplicationJSON{
		TriggerRunOutput: &triggerRunOutput,
		Type:             typ,
	}
}

func CreateTriggerRunCustom200ApplicationJSONValidateErrorJSON(validateErrorJSON shared.ValidateErrorJSON) TriggerRunCustom200ApplicationJSON {
	typ := TriggerRunCustom200ApplicationJSONTypeValidateErrorJSON

	return TriggerRunCustom200ApplicationJSON{
		ValidateErrorJSON: &validateErrorJSON,
		Type:              typ,
	}
}

func (u *TriggerRunCustom200ApplicationJSON) UnmarshalJSON(data []byte) error {

	triggerRunOutput := new(shared.TriggerRunOutput)
	if err := utils.UnmarshalJSON(data, &triggerRunOutput, "", true, true); err == nil {
		u.TriggerRunOutput = triggerRunOutput
		u.Type = TriggerRunCustom200ApplicationJSONTypeTriggerRunOutput
		return nil
	}

	validateErrorJSON := new(shared.ValidateErrorJSON)
	if err := utils.UnmarshalJSON(data, &validateErrorJSON, "", true, true); err == nil {
		u.ValidateErrorJSON = validateErrorJSON
		u.Type = TriggerRunCustom200ApplicationJSONTypeValidateErrorJSON
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u TriggerRunCustom200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.TriggerRunOutput != nil {
		return utils.MarshalJSON(u.TriggerRunOutput, "", true)
	}

	if u.ValidateErrorJSON != nil {
		return utils.MarshalJSON(u.ValidateErrorJSON, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type TriggerRunCustomResponse struct {
	ContentType string
	StatusCode  int
	RawResponse *http.Response
	// Ok
	TriggerRunCustom200ApplicationJSONOneOf *TriggerRunCustom200ApplicationJSON
	// Validation Failed
	ValidateErrorJSON *shared.ValidateErrorJSON
}

func (o *TriggerRunCustomResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *TriggerRunCustomResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *TriggerRunCustomResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *TriggerRunCustomResponse) GetTriggerRunCustom200ApplicationJSONOneOf() *TriggerRunCustom200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.TriggerRunCustom200ApplicationJSONOneOf
}

func (o *TriggerRunCustomResponse) GetValidateErrorJSON() *shared.ValidateErrorJSON {
	if o == nil {
		return nil
	}
	return o.ValidateErrorJSON
}
