// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/utils"
	"net/http"
)

type CreateSync200ApplicationJSONType string

const (
	CreateSync200ApplicationJSONTypeSync              CreateSync200ApplicationJSONType = "Sync"
	CreateSync200ApplicationJSONTypeValidateErrorJSON CreateSync200ApplicationJSONType = "ValidateErrorJSON"
	CreateSync200ApplicationJSONTypeStr               CreateSync200ApplicationJSONType = "str"
)

type CreateSync200ApplicationJSON struct {
	Sync              *shared.Sync
	ValidateErrorJSON *shared.ValidateErrorJSON
	Str               *string

	Type CreateSync200ApplicationJSONType
}

func CreateCreateSync200ApplicationJSONSync(sync shared.Sync) CreateSync200ApplicationJSON {
	typ := CreateSync200ApplicationJSONTypeSync

	return CreateSync200ApplicationJSON{
		Sync: &sync,
		Type: typ,
	}
}

func CreateCreateSync200ApplicationJSONValidateErrorJSON(validateErrorJSON shared.ValidateErrorJSON) CreateSync200ApplicationJSON {
	typ := CreateSync200ApplicationJSONTypeValidateErrorJSON

	return CreateSync200ApplicationJSON{
		ValidateErrorJSON: &validateErrorJSON,
		Type:              typ,
	}
}

func CreateCreateSync200ApplicationJSONStr(str string) CreateSync200ApplicationJSON {
	typ := CreateSync200ApplicationJSONTypeStr

	return CreateSync200ApplicationJSON{
		Str:  &str,
		Type: typ,
	}
}

func (u *CreateSync200ApplicationJSON) UnmarshalJSON(data []byte) error {

	validateErrorJSON := new(shared.ValidateErrorJSON)
	if err := utils.UnmarshalJSON(data, &validateErrorJSON, "", true, true); err == nil {
		u.ValidateErrorJSON = validateErrorJSON
		u.Type = CreateSync200ApplicationJSONTypeValidateErrorJSON
		return nil
	}

	sync := new(shared.Sync)
	if err := utils.UnmarshalJSON(data, &sync, "", true, true); err == nil {
		u.Sync = sync
		u.Type = CreateSync200ApplicationJSONTypeSync
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateSync200ApplicationJSONTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateSync200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Sync != nil {
		return utils.MarshalJSON(u.Sync, "", true)
	}

	if u.ValidateErrorJSON != nil {
		return utils.MarshalJSON(u.ValidateErrorJSON, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateSyncResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Ok
	CreateSync200ApplicationJSONOneOf *CreateSync200ApplicationJSON
	// Something went wrong
	InternalServerError *string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Conflict
	ValidateErrorJSON *shared.ValidateErrorJSON
}

func (o *CreateSyncResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateSyncResponse) GetCreateSync200ApplicationJSONOneOf() *CreateSync200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.CreateSync200ApplicationJSONOneOf
}

func (o *CreateSyncResponse) GetInternalServerError() *string {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *CreateSyncResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateSyncResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateSyncResponse) GetValidateErrorJSON() *shared.ValidateErrorJSON {
	if o == nil {
		return nil
	}
	return o.ValidateErrorJSON
}
