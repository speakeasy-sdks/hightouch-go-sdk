// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/models/shared"
	"net/http"
)

type ListDestinationSecurity struct {
	BearerAuth string `security:"scheme,type=http,subtype=bearer,name=Authorization"`
}

// ListDestinationOrderByEnum - Order the returned destinations
type ListDestinationOrderByEnum string

const (
	ListDestinationOrderByEnumID        ListDestinationOrderByEnum = "id"
	ListDestinationOrderByEnumName      ListDestinationOrderByEnum = "name"
	ListDestinationOrderByEnumSlug      ListDestinationOrderByEnum = "slug"
	ListDestinationOrderByEnumCreatedAt ListDestinationOrderByEnum = "createdAt"
	ListDestinationOrderByEnumUpdatedAt ListDestinationOrderByEnum = "updatedAt"
)

func (e ListDestinationOrderByEnum) ToPointer() *ListDestinationOrderByEnum {
	return &e
}

func (e *ListDestinationOrderByEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "id":
		fallthrough
	case "name":
		fallthrough
	case "slug":
		fallthrough
	case "createdAt":
		fallthrough
	case "updatedAt":
		*e = ListDestinationOrderByEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListDestinationOrderByEnum: %s", s)
	}
}

type ListDestinationRequest struct {
	// limit the number of objects returned (default is 100)
	Limit *float64 `queryParam:"style=form,explode=true,name=limit"`
	// Filter based on the destination's name
	Name *string `queryParam:"style=form,explode=true,name=name"`
	// set the offset on results (for pagination)
	Offset *float64 `queryParam:"style=form,explode=true,name=offset"`
	// Order the returned destinations
	OrderBy *ListDestinationOrderByEnum `queryParam:"style=form,explode=true,name=orderBy"`
	// Filter based on destination's slug
	Slug *string `queryParam:"style=form,explode=true,name=slug"`
}

// ListDestination200ApplicationJSON - Ok
type ListDestination200ApplicationJSON struct {
	Data []shared.Destination `json:"data"`
}

type ListDestinationResponse struct {
	ContentType string
	// Ok
	ListDestination200ApplicationJSONObject *ListDestination200ApplicationJSON
	StatusCode                              int
	RawResponse                             *http.Response
	// Validation Failed
	ValidateErrorJSON *shared.ValidateErrorJSON
}
