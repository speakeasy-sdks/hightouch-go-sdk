// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/utils"
	"net/http"
)

type CreateDestination200ApplicationJSONType string

const (
	CreateDestination200ApplicationJSONTypeDestination       CreateDestination200ApplicationJSONType = "Destination"
	CreateDestination200ApplicationJSONTypeValidateErrorJSON CreateDestination200ApplicationJSONType = "ValidateErrorJSON"
	CreateDestination200ApplicationJSONTypeStr               CreateDestination200ApplicationJSONType = "str"
)

type CreateDestination200ApplicationJSON struct {
	Destination       *shared.Destination
	ValidateErrorJSON *shared.ValidateErrorJSON
	Str               *string

	Type CreateDestination200ApplicationJSONType
}

func CreateCreateDestination200ApplicationJSONDestination(destination shared.Destination) CreateDestination200ApplicationJSON {
	typ := CreateDestination200ApplicationJSONTypeDestination

	return CreateDestination200ApplicationJSON{
		Destination: &destination,
		Type:        typ,
	}
}

func CreateCreateDestination200ApplicationJSONValidateErrorJSON(validateErrorJSON shared.ValidateErrorJSON) CreateDestination200ApplicationJSON {
	typ := CreateDestination200ApplicationJSONTypeValidateErrorJSON

	return CreateDestination200ApplicationJSON{
		ValidateErrorJSON: &validateErrorJSON,
		Type:              typ,
	}
}

func CreateCreateDestination200ApplicationJSONStr(str string) CreateDestination200ApplicationJSON {
	typ := CreateDestination200ApplicationJSONTypeStr

	return CreateDestination200ApplicationJSON{
		Str:  &str,
		Type: typ,
	}
}

func (u *CreateDestination200ApplicationJSON) UnmarshalJSON(data []byte) error {

	validateErrorJSON := new(shared.ValidateErrorJSON)
	if err := utils.UnmarshalJSON(data, &validateErrorJSON, "", true, true); err == nil {
		u.ValidateErrorJSON = validateErrorJSON
		u.Type = CreateDestination200ApplicationJSONTypeValidateErrorJSON
		return nil
	}

	destination := new(shared.Destination)
	if err := utils.UnmarshalJSON(data, &destination, "", true, true); err == nil {
		u.Destination = destination
		u.Type = CreateDestination200ApplicationJSONTypeDestination
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateDestination200ApplicationJSONTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateDestination200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Destination != nil {
		return utils.MarshalJSON(u.Destination, "", true)
	}

	if u.ValidateErrorJSON != nil {
		return utils.MarshalJSON(u.ValidateErrorJSON, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateDestinationResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Ok
	CreateDestination200ApplicationJSONOneOf *CreateDestination200ApplicationJSON
	// Something went wrong
	InternalServerError *string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Conflict
	ValidateErrorJSON *shared.ValidateErrorJSON
}

func (o *CreateDestinationResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateDestinationResponse) GetCreateDestination200ApplicationJSONOneOf() *CreateDestination200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.CreateDestination200ApplicationJSONOneOf
}

func (o *CreateDestinationResponse) GetInternalServerError() *string {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *CreateDestinationResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateDestinationResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateDestinationResponse) GetValidateErrorJSON() *shared.ValidateErrorJSON {
	if o == nil {
		return nil
	}
	return o.ValidateErrorJSON
}
