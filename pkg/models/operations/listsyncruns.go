// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/utils"
	"net/http"
	"time"
)

// ListSyncRunsQueryParamOrderBy - specify the order
type ListSyncRunsQueryParamOrderBy string

const (
	ListSyncRunsQueryParamOrderByID         ListSyncRunsQueryParamOrderBy = "id"
	ListSyncRunsQueryParamOrderByCreatedAt  ListSyncRunsQueryParamOrderBy = "createdAt"
	ListSyncRunsQueryParamOrderByStartedAt  ListSyncRunsQueryParamOrderBy = "startedAt"
	ListSyncRunsQueryParamOrderByFinishedAt ListSyncRunsQueryParamOrderBy = "finishedAt"
)

func (e ListSyncRunsQueryParamOrderBy) ToPointer() *ListSyncRunsQueryParamOrderBy {
	return &e
}

func (e *ListSyncRunsQueryParamOrderBy) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "id":
		fallthrough
	case "createdAt":
		fallthrough
	case "startedAt":
		fallthrough
	case "finishedAt":
		*e = ListSyncRunsQueryParamOrderBy(v)
		return nil
	default:
		return fmt.Errorf("invalid value for ListSyncRunsQueryParamOrderBy: %v", v)
	}
}

type ListSyncRunsRequest struct {
	// select sync runs that are started after given ISO timestamp
	After *time.Time `queryParam:"style=form,explode=true,name=after"`
	// select sync runs that are started before certain ISO timestamp
	Before *time.Time `queryParam:"style=form,explode=true,name=before"`
	// limit the number of objects returned (default is 5)
	Limit *float64 `default:"100" queryParam:"style=form,explode=true,name=limit"`
	// set the offset on results (for pagination)
	Offset *float64 `default:"0" queryParam:"style=form,explode=true,name=offset"`
	// specify the order
	OrderBy *ListSyncRunsQueryParamOrderBy `default:"id" queryParam:"style=form,explode=true,name=orderBy"`
	// query for specific run id
	RunID  *float64 `queryParam:"style=form,explode=true,name=runId"`
	SyncID float64  `pathParam:"style=simple,explode=false,name=syncId"`
	// select sync runs that are started within last given minutes
	Within *float64 `queryParam:"style=form,explode=true,name=within"`
}

func (l ListSyncRunsRequest) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(l, "", false)
}

func (l *ListSyncRunsRequest) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &l, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *ListSyncRunsRequest) GetAfter() *time.Time {
	if o == nil {
		return nil
	}
	return o.After
}

func (o *ListSyncRunsRequest) GetBefore() *time.Time {
	if o == nil {
		return nil
	}
	return o.Before
}

func (o *ListSyncRunsRequest) GetLimit() *float64 {
	if o == nil {
		return nil
	}
	return o.Limit
}

func (o *ListSyncRunsRequest) GetOffset() *float64 {
	if o == nil {
		return nil
	}
	return o.Offset
}

func (o *ListSyncRunsRequest) GetOrderBy() *ListSyncRunsQueryParamOrderBy {
	if o == nil {
		return nil
	}
	return o.OrderBy
}

func (o *ListSyncRunsRequest) GetRunID() *float64 {
	if o == nil {
		return nil
	}
	return o.RunID
}

func (o *ListSyncRunsRequest) GetSyncID() float64 {
	if o == nil {
		return 0.0
	}
	return o.SyncID
}

func (o *ListSyncRunsRequest) GetWithin() *float64 {
	if o == nil {
		return nil
	}
	return o.Within
}

// ListSyncRunsResponseBody - Ok
type ListSyncRunsResponseBody struct {
	Data    []shared.SyncRun `json:"data"`
	HasMore bool             `json:"hasMore"`
}

func (o *ListSyncRunsResponseBody) GetData() []shared.SyncRun {
	if o == nil {
		return []shared.SyncRun{}
	}
	return o.Data
}

func (o *ListSyncRunsResponseBody) GetHasMore() bool {
	if o == nil {
		return false
	}
	return o.HasMore
}

type ListSyncRunsResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Ok
	Object *ListSyncRunsResponseBody
}

func (o *ListSyncRunsResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *ListSyncRunsResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *ListSyncRunsResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *ListSyncRunsResponse) GetObject() *ListSyncRunsResponseBody {
	if o == nil {
		return nil
	}
	return o.Object
}
