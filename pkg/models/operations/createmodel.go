// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"errors"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/models/shared"
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/utils"
	"net/http"
)

type CreateModel200ApplicationJSONType string

const (
	CreateModel200ApplicationJSONTypeModel             CreateModel200ApplicationJSONType = "Model"
	CreateModel200ApplicationJSONTypeValidateErrorJSON CreateModel200ApplicationJSONType = "ValidateErrorJSON"
	CreateModel200ApplicationJSONTypeStr               CreateModel200ApplicationJSONType = "str"
)

type CreateModel200ApplicationJSON struct {
	Model             *shared.Model
	ValidateErrorJSON *shared.ValidateErrorJSON
	Str               *string

	Type CreateModel200ApplicationJSONType
}

func CreateCreateModel200ApplicationJSONModel(model shared.Model) CreateModel200ApplicationJSON {
	typ := CreateModel200ApplicationJSONTypeModel

	return CreateModel200ApplicationJSON{
		Model: &model,
		Type:  typ,
	}
}

func CreateCreateModel200ApplicationJSONValidateErrorJSON(validateErrorJSON shared.ValidateErrorJSON) CreateModel200ApplicationJSON {
	typ := CreateModel200ApplicationJSONTypeValidateErrorJSON

	return CreateModel200ApplicationJSON{
		ValidateErrorJSON: &validateErrorJSON,
		Type:              typ,
	}
}

func CreateCreateModel200ApplicationJSONStr(str string) CreateModel200ApplicationJSON {
	typ := CreateModel200ApplicationJSONTypeStr

	return CreateModel200ApplicationJSON{
		Str:  &str,
		Type: typ,
	}
}

func (u *CreateModel200ApplicationJSON) UnmarshalJSON(data []byte) error {

	validateErrorJSON := new(shared.ValidateErrorJSON)
	if err := utils.UnmarshalJSON(data, &validateErrorJSON, "", true, true); err == nil {
		u.ValidateErrorJSON = validateErrorJSON
		u.Type = CreateModel200ApplicationJSONTypeValidateErrorJSON
		return nil
	}

	model := new(shared.Model)
	if err := utils.UnmarshalJSON(data, &model, "", true, true); err == nil {
		u.Model = model
		u.Type = CreateModel200ApplicationJSONTypeModel
		return nil
	}

	str := new(string)
	if err := utils.UnmarshalJSON(data, &str, "", true, true); err == nil {
		u.Str = str
		u.Type = CreateModel200ApplicationJSONTypeStr
		return nil
	}

	return errors.New("could not unmarshal into supported union types")
}

func (u CreateModel200ApplicationJSON) MarshalJSON() ([]byte, error) {
	if u.Model != nil {
		return utils.MarshalJSON(u.Model, "", true)
	}

	if u.ValidateErrorJSON != nil {
		return utils.MarshalJSON(u.ValidateErrorJSON, "", true)
	}

	if u.Str != nil {
		return utils.MarshalJSON(u.Str, "", true)
	}

	return nil, errors.New("could not marshal union type: all fields are null")
}

type CreateModelResponse struct {
	// HTTP response content type for this operation
	ContentType string
	// Ok
	CreateModel200ApplicationJSONOneOf *CreateModel200ApplicationJSON
	// Something went wrong
	InternalServerError *string
	// HTTP response status code for this operation
	StatusCode int
	// Raw HTTP response; suitable for custom response parsing
	RawResponse *http.Response
	// Conflict
	ValidateErrorJSON *shared.ValidateErrorJSON
}

func (o *CreateModelResponse) GetContentType() string {
	if o == nil {
		return ""
	}
	return o.ContentType
}

func (o *CreateModelResponse) GetCreateModel200ApplicationJSONOneOf() *CreateModel200ApplicationJSON {
	if o == nil {
		return nil
	}
	return o.CreateModel200ApplicationJSONOneOf
}

func (o *CreateModelResponse) GetInternalServerError() *string {
	if o == nil {
		return nil
	}
	return o.InternalServerError
}

func (o *CreateModelResponse) GetStatusCode() int {
	if o == nil {
		return 0
	}
	return o.StatusCode
}

func (o *CreateModelResponse) GetRawResponse() *http.Response {
	if o == nil {
		return nil
	}
	return o.RawResponse
}

func (o *CreateModelResponse) GetValidateErrorJSON() *shared.ValidateErrorJSON {
	if o == nil {
		return nil
	}
	return o.ValidateErrorJSON
}
