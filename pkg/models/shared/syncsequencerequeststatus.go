// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SyncSequenceRequestStatus string

const (
	SyncSequenceRequestStatusPending   SyncSequenceRequestStatus = "pending"
	SyncSequenceRequestStatusRunning   SyncSequenceRequestStatus = "running"
	SyncSequenceRequestStatusDone      SyncSequenceRequestStatus = "done"
	SyncSequenceRequestStatusFailed    SyncSequenceRequestStatus = "failed"
	SyncSequenceRequestStatusCancelled SyncSequenceRequestStatus = "cancelled"
)

func (e SyncSequenceRequestStatus) ToPointer() *SyncSequenceRequestStatus {
	return &e
}

func (e *SyncSequenceRequestStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "pending":
		fallthrough
	case "running":
		fallthrough
	case "done":
		fallthrough
	case "failed":
		fallthrough
	case "cancelled":
		*e = SyncSequenceRequestStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyncSequenceRequestStatus: %v", v)
	}
}
