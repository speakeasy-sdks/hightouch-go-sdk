// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ValidateErrorJSONMessageEnum string

const (
	ValidateErrorJSONMessageEnumValidationFailed ValidateErrorJSONMessageEnum = "Validation failed"
)

func (e ValidateErrorJSONMessageEnum) ToPointer() *ValidateErrorJSONMessageEnum {
	return &e
}

func (e *ValidateErrorJSONMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Validation failed":
		*e = ValidateErrorJSONMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ValidateErrorJSONMessageEnum: %s", s)
	}
}

// ValidateErrorJSON - Validation Failed
type ValidateErrorJSON struct {
	Details map[string]interface{}       `json:"details"`
	Message ValidateErrorJSONMessageEnum `json:"message"`
}
