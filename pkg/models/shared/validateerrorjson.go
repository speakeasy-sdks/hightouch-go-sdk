// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type Message string

const (
	MessageValidationFailed Message = "Validation failed"
)

func (e Message) ToPointer() *Message {
	return &e
}

func (e *Message) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "Validation failed":
		*e = Message(v)
		return nil
	default:
		return fmt.Errorf("invalid value for Message: %v", v)
	}
}

type ValidateErrorJSON struct {
	Details map[string]interface{} `json:"details"`
	Message Message                `json:"message"`
}

func (o *ValidateErrorJSON) GetDetails() map[string]interface{} {
	if o == nil {
		return map[string]interface{}{}
	}
	return o.Details
}

func (o *ValidateErrorJSON) GetMessage() Message {
	if o == nil {
		return Message("")
	}
	return o.Message
}
