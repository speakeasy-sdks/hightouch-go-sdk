// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type SyncStatusEnum string

const (
	SyncStatusEnumDisabled    SyncStatusEnum = "disabled"
	SyncStatusEnumPending     SyncStatusEnum = "pending"
	SyncStatusEnumCancelled   SyncStatusEnum = "cancelled"
	SyncStatusEnumFailed      SyncStatusEnum = "failed"
	SyncStatusEnumQueued      SyncStatusEnum = "queued"
	SyncStatusEnumSuccess     SyncStatusEnum = "success"
	SyncStatusEnumWarning     SyncStatusEnum = "warning"
	SyncStatusEnumQuerying    SyncStatusEnum = "querying"
	SyncStatusEnumProcessing  SyncStatusEnum = "processing"
	SyncStatusEnumReporting   SyncStatusEnum = "reporting"
	SyncStatusEnumInterrupted SyncStatusEnum = "interrupted"
)

func (e SyncStatusEnum) ToPointer() *SyncStatusEnum {
	return &e
}

func (e *SyncStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "pending":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		fallthrough
	case "queued":
		fallthrough
	case "success":
		fallthrough
	case "warning":
		fallthrough
	case "querying":
		fallthrough
	case "processing":
		fallthrough
	case "reporting":
		fallthrough
	case "interrupted":
		*e = SyncStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyncStatusEnum: %v", v)
	}
}
