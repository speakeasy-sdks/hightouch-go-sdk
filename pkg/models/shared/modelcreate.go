// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// ModelCreateCustom - Custom query for sources that doesn't support sql. For example, Airtable.
type ModelCreateCustom struct {
	Query interface{} `json:"query"`
}

func (o *ModelCreateCustom) GetQuery() interface{} {
	if o == nil {
		return nil
	}
	return o.Query
}

type ModelCreateDbt struct {
	// Model id that refers to a dbt model
	ModelID string `json:"modelId"`
}

func (o *ModelCreateDbt) GetModelID() string {
	if o == nil {
		return ""
	}
	return o.ModelID
}

// ModelCreateRaw - Standard raw SQL query
type ModelCreateRaw struct {
	SQL string `json:"sql"`
}

func (o *ModelCreateRaw) GetSQL() string {
	if o == nil {
		return ""
	}
	return o.SQL
}

// ModelCreateTable - Table-based query that fetches on a table instead of SQL
type ModelCreateTable struct {
	Name string `json:"name"`
}

func (o *ModelCreateTable) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// ModelCreateVisual - Visual query, used by audience
type ModelCreateVisual struct {
	Filter interface{} `json:"filter"`
	// Parent id of the schema that visual query is based on
	ParentID       string `json:"parentId"`
	PrimaryLabel   string `json:"primaryLabel"`
	SecondaryLabel string `json:"secondaryLabel"`
}

func (o *ModelCreateVisual) GetFilter() interface{} {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *ModelCreateVisual) GetParentID() string {
	if o == nil {
		return ""
	}
	return o.ParentID
}

func (o *ModelCreateVisual) GetPrimaryLabel() string {
	if o == nil {
		return ""
	}
	return o.PrimaryLabel
}

func (o *ModelCreateVisual) GetSecondaryLabel() string {
	if o == nil {
		return ""
	}
	return o.SecondaryLabel
}

// ModelCreate - The input for creating a Model
type ModelCreate struct {
	// Custom query for sources that doesn't support sql. For example, Airtable.
	Custom   *ModelCreateCustom `json:"custom,omitempty"`
	Dbt      *ModelCreateDbt    `json:"dbt,omitempty"`
	FolderID *string            `json:"folderId,omitempty"`
	// If is_schema is true, the model is just used to build other models.
	// Either as part of visual querying, or as the root of a visual query.
	IsSchema bool `json:"isSchema"`
	// The name of the model
	Name string `json:"name"`
	// The primary key will be null if the query doesn't get directly synced (e.g. a relationship table for visual querying)
	PrimaryKey string `json:"primaryKey"`
	// The type of the query. Available options: custom, raw_sql, tabel, dbt and visual.
	QueryType string `json:"queryType"`
	// Standard raw SQL query
	Raw *ModelCreateRaw `json:"raw,omitempty"`
	// The slug of the model
	Slug string `json:"slug"`
	// The id of the source that model is connected to
	SourceID string `json:"sourceId"`
	// Table-based query that fetches on a table instead of SQL
	Table *ModelCreateTable `json:"table,omitempty"`
	// Visual query, used by audience
	Visual *ModelCreateVisual `json:"visual,omitempty"`
}

func (o *ModelCreate) GetCustom() *ModelCreateCustom {
	if o == nil {
		return nil
	}
	return o.Custom
}

func (o *ModelCreate) GetDbt() *ModelCreateDbt {
	if o == nil {
		return nil
	}
	return o.Dbt
}

func (o *ModelCreate) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *ModelCreate) GetIsSchema() bool {
	if o == nil {
		return false
	}
	return o.IsSchema
}

func (o *ModelCreate) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

func (o *ModelCreate) GetPrimaryKey() string {
	if o == nil {
		return ""
	}
	return o.PrimaryKey
}

func (o *ModelCreate) GetQueryType() string {
	if o == nil {
		return ""
	}
	return o.QueryType
}

func (o *ModelCreate) GetRaw() *ModelCreateRaw {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *ModelCreate) GetSlug() string {
	if o == nil {
		return ""
	}
	return o.Slug
}

func (o *ModelCreate) GetSourceID() string {
	if o == nil {
		return ""
	}
	return o.SourceID
}

func (o *ModelCreate) GetTable() *ModelCreateTable {
	if o == nil {
		return nil
	}
	return o.Table
}

func (o *ModelCreate) GetVisual() *ModelCreateVisual {
	if o == nil {
		return nil
	}
	return o.Visual
}
