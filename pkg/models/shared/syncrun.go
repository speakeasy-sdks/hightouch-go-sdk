// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"github.com/speakeasy-sdks/hightouch-go-sdk/pkg/utils"
	"time"
)

// FailedRows - The number of rows that we attempted to sync, but were rejected by the
// destination.
//
// This does not include rows that weren't attempted due to the sync being
// cancelled.
type FailedRows struct {
	// The number of failed adds.
	AddedCount float64 `json:"addedCount"`
	// The number of failed changes.
	ChangedCount float64 `json:"changedCount"`
	// The number of failed removes.
	RemovedCount float64 `json:"removedCount"`
}

func (o *FailedRows) GetAddedCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.AddedCount
}

func (o *FailedRows) GetChangedCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ChangedCount
}

func (o *FailedRows) GetRemovedCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RemovedCount
}

// PlannedRows - The number of planned rows that this sync run was supposed to execute.
//
// Note that the counts for `successfulRows` and `failedRows` may not add up
// to `plannedRows` if the sync was cancelled.
type PlannedRows struct {
	// The number of added rows.
	AddedCount float64 `json:"addedCount"`
	// The number of changed rows.
	ChangedCount float64 `json:"changedCount"`
	// The number of removed rows.
	RemovedCount float64 `json:"removedCount"`
}

func (o *PlannedRows) GetAddedCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.AddedCount
}

func (o *PlannedRows) GetChangedCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ChangedCount
}

func (o *PlannedRows) GetRemovedCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RemovedCount
}

// SuccessfulRows - The number of rows that were successfully processed by the destination.
type SuccessfulRows struct {
	// The number of successful adds.
	AddedCount float64 `json:"addedCount"`
	// The number of successful changes.
	ChangedCount float64 `json:"changedCount"`
	// The number of successful removes.
	RemovedCount float64 `json:"removedCount"`
}

func (o *SuccessfulRows) GetAddedCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.AddedCount
}

func (o *SuccessfulRows) GetChangedCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.ChangedCount
}

func (o *SuccessfulRows) GetRemovedCount() float64 {
	if o == nil {
		return 0.0
	}
	return o.RemovedCount
}

type SyncRun struct {
	// The completion ratio of sync run, showing the progress of a sync run
	CompletionRatio float64 `json:"completionRatio"`
	// The timestamp when sync run was created. In most cases this will be
	// equivalent to `startedAt`, but it may be earlier if the sync was triggered
	// while a run was already in progress, and the new run didn't start for
	// a while.
	CreatedAt time.Time `json:"createdAt"`
	// Error message if the sync run didn't finish successfully
	Error *string `json:"error,omitempty"`
	// The number of rows that we attempted to sync, but were rejected by the
	// destination.
	//
	// This does not include rows that weren't attempted due to the sync being
	// cancelled.
	FailedRows FailedRows `json:"failedRows"`
	// The timestamp when the sync run finished
	FinishedAt time.Time `json:"finishedAt"`
	// The sync run's id
	ID string `json:"id"`
	// The number of planned rows that this sync run was supposed to execute.
	//
	// Note that the counts for `successfulRows` and `failedRows` may not add up
	// to `plannedRows` if the sync was cancelled.
	PlannedRows PlannedRows `json:"plannedRows"`
	// The number of rows in the query.
	QuerySize float64 `json:"querySize"`
	// The timestamp when the sync run started
	StartedAt time.Time `json:"startedAt"`
	// The status of sync runs
	Status SyncRunStatus `json:"status"`
	// The number of rows that were successfully processed by the destination.
	SuccessfulRows SuccessfulRows `json:"successfulRows"`
}

func (s SyncRun) MarshalJSON() ([]byte, error) {
	return utils.MarshalJSON(s, "", false)
}

func (s *SyncRun) UnmarshalJSON(data []byte) error {
	if err := utils.UnmarshalJSON(data, &s, "", false, false); err != nil {
		return err
	}
	return nil
}

func (o *SyncRun) GetCompletionRatio() float64 {
	if o == nil {
		return 0.0
	}
	return o.CompletionRatio
}

func (o *SyncRun) GetCreatedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.CreatedAt
}

func (o *SyncRun) GetError() *string {
	if o == nil {
		return nil
	}
	return o.Error
}

func (o *SyncRun) GetFailedRows() FailedRows {
	if o == nil {
		return FailedRows{}
	}
	return o.FailedRows
}

func (o *SyncRun) GetFinishedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.FinishedAt
}

func (o *SyncRun) GetID() string {
	if o == nil {
		return ""
	}
	return o.ID
}

func (o *SyncRun) GetPlannedRows() PlannedRows {
	if o == nil {
		return PlannedRows{}
	}
	return o.PlannedRows
}

func (o *SyncRun) GetQuerySize() float64 {
	if o == nil {
		return 0.0
	}
	return o.QuerySize
}

func (o *SyncRun) GetStartedAt() time.Time {
	if o == nil {
		return time.Time{}
	}
	return o.StartedAt
}

func (o *SyncRun) GetStatus() SyncRunStatus {
	if o == nil {
		return SyncRunStatus("")
	}
	return o.Status
}

func (o *SyncRun) GetSuccessfulRows() SuccessfulRows {
	if o == nil {
		return SuccessfulRows{}
	}
	return o.SuccessfulRows
}
