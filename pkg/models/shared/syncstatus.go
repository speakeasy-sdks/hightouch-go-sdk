// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SyncStatus - SyncStatus
type SyncStatus string

const (
	SyncStatusDisabled    SyncStatus = "disabled"
	SyncStatusPending     SyncStatus = "pending"
	SyncStatusCancelled   SyncStatus = "cancelled"
	SyncStatusFailed      SyncStatus = "failed"
	SyncStatusQueued      SyncStatus = "queued"
	SyncStatusSuccess     SyncStatus = "success"
	SyncStatusWarning     SyncStatus = "warning"
	SyncStatusQuerying    SyncStatus = "querying"
	SyncStatusProcessing  SyncStatus = "processing"
	SyncStatusReporting   SyncStatus = "reporting"
	SyncStatusInterrupted SyncStatus = "interrupted"
)

func (e SyncStatus) ToPointer() *SyncStatus {
	return &e
}

func (e *SyncStatus) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "disabled":
		fallthrough
	case "pending":
		fallthrough
	case "cancelled":
		fallthrough
	case "failed":
		fallthrough
	case "queued":
		fallthrough
	case "success":
		fallthrough
	case "warning":
		fallthrough
	case "querying":
		fallthrough
	case "processing":
		fallthrough
	case "reporting":
		fallthrough
	case "interrupted":
		*e = SyncStatus(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyncStatus: %v", v)
	}
}
