// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

// ModelUpdateCustom - Custom query for sources that doesn't support sql. For example, Airtable.
type ModelUpdateCustom struct {
	Query interface{} `json:"query"`
}

func (o *ModelUpdateCustom) GetQuery() interface{} {
	if o == nil {
		return nil
	}
	return o.Query
}

type ModelUpdateDbt struct {
	// Model id that refers to a dbt model
	ModelID float64 `json:"modelId"`
}

func (o *ModelUpdateDbt) GetModelID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ModelID
}

// ModelUpdateRaw - Standard raw SQL query
type ModelUpdateRaw struct {
	SQL string `json:"sql"`
}

func (o *ModelUpdateRaw) GetSQL() string {
	if o == nil {
		return ""
	}
	return o.SQL
}

// ModelUpdateTable - Table-based query that fetches on a table instead of SQL
type ModelUpdateTable struct {
	Name string `json:"name"`
}

func (o *ModelUpdateTable) GetName() string {
	if o == nil {
		return ""
	}
	return o.Name
}

// ModelUpdateVisual - Visual query, used by audience
type ModelUpdateVisual struct {
	Filter interface{} `json:"filter"`
	// Parent id of the schema that visual query is based on
	ParentID       float64 `json:"parentId"`
	PrimaryLabel   string  `json:"primaryLabel"`
	SecondaryLabel string  `json:"secondaryLabel"`
}

func (o *ModelUpdateVisual) GetFilter() interface{} {
	if o == nil {
		return nil
	}
	return o.Filter
}

func (o *ModelUpdateVisual) GetParentID() float64 {
	if o == nil {
		return 0.0
	}
	return o.ParentID
}

func (o *ModelUpdateVisual) GetPrimaryLabel() string {
	if o == nil {
		return ""
	}
	return o.PrimaryLabel
}

func (o *ModelUpdateVisual) GetSecondaryLabel() string {
	if o == nil {
		return ""
	}
	return o.SecondaryLabel
}

// ModelUpdate - The input for updating a Model
type ModelUpdate struct {
	// Custom query for sources that doesn't support sql. For example, Airtable.
	Custom   *ModelUpdateCustom `json:"custom,omitempty"`
	Dbt      *ModelUpdateDbt    `json:"dbt,omitempty"`
	FolderID *string            `json:"folderId,omitempty"`
	// If is_schema is true, the model is just used to build other models.
	// Either as part of visual querying, or as the root of a visual query.
	IsSchema *bool `json:"isSchema,omitempty"`
	// The name of the model
	Name *string `json:"name,omitempty"`
	// The primary key will be null if the query doesn't get directly synced (e.g. a relationship table for visual querying)
	PrimaryKey *string `json:"primaryKey,omitempty"`
	// Standard raw SQL query
	Raw *ModelUpdateRaw `json:"raw,omitempty"`
	// Table-based query that fetches on a table instead of SQL
	Table *ModelUpdateTable `json:"table,omitempty"`
	// Visual query, used by audience
	Visual *ModelUpdateVisual `json:"visual,omitempty"`
}

func (o *ModelUpdate) GetCustom() *ModelUpdateCustom {
	if o == nil {
		return nil
	}
	return o.Custom
}

func (o *ModelUpdate) GetDbt() *ModelUpdateDbt {
	if o == nil {
		return nil
	}
	return o.Dbt
}

func (o *ModelUpdate) GetFolderID() *string {
	if o == nil {
		return nil
	}
	return o.FolderID
}

func (o *ModelUpdate) GetIsSchema() *bool {
	if o == nil {
		return nil
	}
	return o.IsSchema
}

func (o *ModelUpdate) GetName() *string {
	if o == nil {
		return nil
	}
	return o.Name
}

func (o *ModelUpdate) GetPrimaryKey() *string {
	if o == nil {
		return nil
	}
	return o.PrimaryKey
}

func (o *ModelUpdate) GetRaw() *ModelUpdateRaw {
	if o == nil {
		return nil
	}
	return o.Raw
}

func (o *ModelUpdate) GetTable() *ModelUpdateTable {
	if o == nil {
		return nil
	}
	return o.Table
}

func (o *ModelUpdate) GetVisual() *ModelUpdateVisual {
	if o == nil {
		return nil
	}
	return o.Visual
}
