// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"time"
)

// ModelCustom - Custom query for sources that doesn't support sql. For example, Airtable.
type ModelCustom struct {
	Query interface{} `json:"query"`
}

// ModelDbt - Query that is based on a dbt model
type ModelDbt struct {
	// Compiled SQL in the dbt model
	CompiledSQL string `json:"compiledSql"`
	// Name of the database containing the generated table
	Database string `json:"database"`
	// Unique ID of the model assigned by dbt (usually some combination of the schema and table name)
	DbtUniqueID string `json:"dbtUniqueId"`
	// Model id that refer to a dbt model
	ModelID string `json:"modelId"`
	// Name of the table generated by the dbt model
	Name string `json:"name"`
	// Raw SQL in the dbt model
	RawSQL string `json:"rawSql"`
	// Name of the schema containing the generated table
	Schema string `json:"schema"`
}

// ModelRaw - Standard raw SQL query
type ModelRaw struct {
	SQL string `json:"sql"`
}

// ModelTable - Table-based query that fetches on a table instead of SQL
type ModelTable struct {
	Name string `json:"name"`
}

// ModelVisual - Visual query, used by audience
type ModelVisual struct {
	Filter interface{} `json:"filter"`
	// Parent id of the schema that visual query is based on
	ParentID       string `json:"parentId"`
	PrimaryLabel   string `json:"primaryLabel"`
	SecondaryLabel string `json:"secondaryLabel"`
}

// Model - The SQL query that pulls data from your source to send to your destination.
// We send your SQL query directly to your source so any SQL that is valid for your source (including functions) is valid in Hightouch.
type Model struct {
	// The timestamp when model was created
	CreatedAt time.Time `json:"createdAt"`
	// Custom query for sources that doesn't support sql. For example, Airtable.
	Custom *ModelCustom `json:"custom,omitempty"`
	// Query that is based on a dbt model
	Dbt *ModelDbt `json:"dbt,omitempty"`
	// The id of the model
	ID string `json:"id"`
	// If is_schema is true, the model is just used to build other models.
	// Either as part of visual querying, or as the root of a visual query.
	IsSchema bool `json:"isSchema"`
	// The name of the model
	Name string `json:"name"`
	// The primary key will be null if the query doesn't get directly synced (e.g. a relationship table for visual querying)
	PrimaryKey string `json:"primaryKey"`
	// The type of the query. Available options: custom, raw_sql, tabel, dbt and visual.
	QueryType string `json:"queryType"`
	// Standard raw SQL query
	Raw *ModelRaw `json:"raw,omitempty"`
	// The slug of the model
	Slug string `json:"slug"`
	// The id of the source that model is connected to
	SourceID string `json:"sourceId"`
	// The list of id of syncs that uses this model
	Syncs []string `json:"syncs"`
	// Table-based query that fetches on a table instead of SQL
	Table *ModelTable `json:"table,omitempty"`
	// The tags of the model
	Tags map[string]string `json:"tags"`
	// The timestamp when model was lastly updated
	UpdatedAt time.Time `json:"updatedAt"`
	// Visual query, used by audience
	Visual *ModelVisual `json:"visual,omitempty"`
	// The id of the workspace where the model belongs to
	WorkspaceID string `json:"workspaceId"`
}
