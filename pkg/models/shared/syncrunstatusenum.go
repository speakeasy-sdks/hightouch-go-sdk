// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// SyncRunStatusEnum - The status of sync runs
type SyncRunStatusEnum string

const (
	SyncRunStatusEnumCancelled   SyncRunStatusEnum = "cancelled"
	SyncRunStatusEnumFailed      SyncRunStatusEnum = "failed"
	SyncRunStatusEnumQueued      SyncRunStatusEnum = "queued"
	SyncRunStatusEnumSuccess     SyncRunStatusEnum = "success"
	SyncRunStatusEnumWarning     SyncRunStatusEnum = "warning"
	SyncRunStatusEnumQuerying    SyncRunStatusEnum = "querying"
	SyncRunStatusEnumProcessing  SyncRunStatusEnum = "processing"
	SyncRunStatusEnumReporting   SyncRunStatusEnum = "reporting"
	SyncRunStatusEnumInterrupted SyncRunStatusEnum = "interrupted"
)

func (e SyncRunStatusEnum) ToPointer() *SyncRunStatusEnum {
	return &e
}

func (e *SyncRunStatusEnum) UnmarshalJSON(data []byte) error {
	var v string
	if err := json.Unmarshal(data, &v); err != nil {
		return err
	}
	switch v {
	case "cancelled":
		fallthrough
	case "failed":
		fallthrough
	case "queued":
		fallthrough
	case "success":
		fallthrough
	case "warning":
		fallthrough
	case "querying":
		fallthrough
	case "processing":
		fallthrough
	case "reporting":
		fallthrough
	case "interrupted":
		*e = SyncRunStatusEnum(v)
		return nil
	default:
		return fmt.Errorf("invalid value for SyncRunStatusEnum: %v", v)
	}
}
